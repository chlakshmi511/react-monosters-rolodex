{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list-component.js","components/search-box/search-box-component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","key-","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAQ,SAAAC,GAAK,OACvB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,oBAAIC,OAAMN,EAAMI,QAAQC,GAAxB,SAA6BL,EAAMI,QAAQG,OAC3C,4BAAIP,EAAMI,QAAQI,YCHZC,G,MAAW,SAAAT,GAExB,OADEU,QAAQC,IAAIX,GACP,qBAAKC,UAAU,YAAf,SAA4BD,EAAMY,SAASC,KAAI,SAAAT,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCFxES,G,YAAY,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAaC,EAAjB,EAAiBA,aAAjB,OACrB,uBAAOf,UAAU,SAASgB,KAAK,SAASF,YAAaA,EAAaG,SAAYF,MCmCnEG,E,kDAlCb,aAAc,IAAD,8BACX,gBAOFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAPtC,EAAKC,MAAO,CACVb,SAAU,GACVU,YAAa,IAEfZ,QAAQC,IAAI,EAAKc,OANN,E,qDAYb,WAAoB,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAWkB,S,oBAG9C,WAAU,IAAD,EAC2BC,KAAKN,MAA9Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACXU,EAAmBpB,EAASqB,QAAQ,SAAA7B,GAAO,OAAIA,EAAQG,KAAK2B,cAAcC,SAAUb,EAAYY,kBACvG,OACC,sBAAKjC,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAWc,YAAY,kBAAkBC,aAAce,KAAKf,eAE5D,cAAC,EAAD,CAAUJ,SAAWoB,W,GA3BXI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b6a9fe49.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card =  props => (\n   <div className='card-container'> \n       <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}/>\n       <h1 key-={props.monster.id}>{props.monster.name}</h1>\n       <p>{props.monster.email}</p>\n    </div> \n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css'\n\nexport const CardList = props => {\n  console.log(props);\nreturn <div className='card-list'>{props.monsters.map(monster => (<Card key={monster.id} monster={monster}></Card>))}</div>;\n}","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ( { placeholder, handleChange }) => (\n    <input className='search' type=\"search\" placeholder={placeholder} onChange = {handleChange}/>\n);\n\n\n\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list-component'\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box-component';\n\nclass App extends Component{\n  constructor(){\n    super();  \n    this.state ={\n      monsters: [],\n      searchField: ''\n    }\n    console.log(this.state);\n  }\n  handleChange = (e) => {\n    this.setState({searchField : e.target.value})\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then( users => this.setState({monsters : users}))\n  }\n \n  render() {\n      const {monsters, searchField} = this.state;\n      const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes( searchField.toLowerCase()));\n     return (\n      <div className='App'>\n        <h1>Monosters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={this.handleChange}></SearchBox>\n       \n        <CardList monsters= {filteredMonsters}></CardList>\n      </div>\n        \n    );\n\n   }\n}\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}